package ${package}.controller;

import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import ${package}.domain.${className}DO;
import ${package}.service.${className}Service;
import com.bootdo.common.utils.PageUtils;
import com.github.pagehelper.PageInfo;
import com.bootdo.common.utils.Query;
import com.bootdo.common.utils.R;
import com.bootdo.common.controller.BaseController;
import com.bootdo.common.controller.IPageDefine;

/**
 * ${comments}
 * @author ${author}
 * @date ${datetime}
 */
 
@Controller
@RequestMapping("/${pathName}/${classname}")
public class ${className}Controller extends BaseController {
	@Autowired
	private ${className}Service ${classname}Service;
	
	@GetMapping()
	@RequiresPermissions("${pathName}:${classname}:${classname}")
	String ${className}(){
	    return "${pathName}/${classname}/${classname}_list";
	}
	
	/**
	 * 分页列表查询
	 */
	@ResponseBody
	@GetMapping("/listPage")
	@RequiresPermissions("${pathName}:${classname}:${classname}")
	public PageUtils list(@RequestParam Map<String, Object> params){

		//根据分页参数(格式：{limit=10, offset=0} )，然后进行分页查询
        return getPageList(params, new IPageDefine() {
			
			@Override
			public List<?> getPageRows(Query query){
				return  ${classname}Service.list(query);
			}
        });
	}
	
	/**
	 * 跳转到新增页面
	 */
	@GetMapping("/add")
	@RequiresPermissions("${pathName}:${classname}:add")
	ModelAndView add(){
	    ModelAndView mv = new ModelAndView();
		mv.addObject("${classname}", new ${className}DO());
		mv.setViewName("${pathName}/${classname}/${classname}_edit");
		return mv;
	}
	
	/**
	 * 跳转到修改页面
	 */
	@GetMapping("/edit/{${pk.attrname}}")
	@RequiresPermissions("${pathName}:${classname}:edit")
	ModelAndView edit(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
	    ModelAndView mv = new ModelAndView();
		${className}DO ${classname} = ${classname}Service.get(${pk.attrname});
		mv.addObject("${classname}", ${classname});
		mv.setViewName("${pathName}/${classname}/${classname}_edit");
		return mv;
	}
	
	/**
	 * 新增方法
	 */
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("${pathName}:${classname}:add")
	public R save( ${className}DO ${classname}){
		if(${classname}Service.save(${classname})>0){
			return R.ok();
		}
		return R.error();
	}
	/**
	 * 修改方法
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("${pathName}:${classname}:edit")
	public R update( ${className}DO ${classname}){
		${classname}Service.update(${classname});
		return R.ok();
	}
	
	/**
	 * 单条删除方法
	 */
	@PostMapping( "/remove")
	@ResponseBody
	@RequiresPermissions("${pathName}:${classname}:remove")
	public R remove( ${pk.attrType} ${pk.attrname}){
		if(${classname}Service.remove(${pk.attrname})>0){
		return R.ok();
		}
		return R.error();
	}
	
	/**
	 * 批量删除方法
	 */
	@PostMapping( "/batchRemove")
	@ResponseBody
	@RequiresPermissions("${pathName}:${classname}:batchRemove")
	public R remove(@RequestParam("ids[]") ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.batchRemove(${pk.attrname}s);
		return R.ok();
	}
	
}
